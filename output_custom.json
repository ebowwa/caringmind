{"gemini-socket-html-test.html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Gemini Chat</title>\n    <!-- Link to the CSS file from the same directory -->\n    <link rel=\"stylesheet\" href=\"gemini-chat.css\">\n</head>\n<body>\n    <div class=\"chat-container\">\n        <div id=\"chatLog\"></div>\n        <div class=\"input-area\">\n            <input type=\"text\" id=\"messageInput\" placeholder=\"Type your message...\" />\n            <button id=\"sendButton\" disabled>Send</button>\n        </div>\n        <div class=\"button-group\">\n            <button id=\"recordButton\" disabled>Record Audio</button>\n            <button id=\"stopButton\" disabled>Stop Recording</button>\n            <button id=\"connectButton\">Connect</button>\n            <button id=\"disconnectButton\" disabled>Disconnect</button>\n        </div>\n    </div>\n\n    <script>\n        // DOM Elements\n        const chatLog = document.getElementById('chatLog');\n        const messageInput = document.getElementById('messageInput');\n        const sendButton = document.getElementById('sendButton');\n        const recordButton = document.getElementById('recordButton');\n        const stopButton = document.getElementById('stopButton');\n        const connectButton = document.getElementById('connectButton');\n        const disconnectButton = document.getElementById('disconnectButton');\n\n        // Variables\n        let mediaRecorder;\n        let audioChunks = [];\n        let ws = null;\n\n        // Helper Functions\n        function appendMessage(sender, message) {\n            const messageElement = document.createElement('div');\n            messageElement.classList.add('message', sender.toLowerCase());\n            messageElement.textContent = message;\n            chatLog.appendChild(messageElement);\n            chatLog.scrollTop = chatLog.scrollHeight;\n        }\n\n        function toggleButtons(connected) {\n            sendButton.disabled = !connected;\n            recordButton.disabled = !connected;\n            connectButton.disabled = connected;\n            disconnectButton.disabled = !connected;\n        }\n\n        // WebSocket Functions\n        function connectWebSocket() {\n            ws = new WebSocket('wss://4d9b-76-78-246-141.ngrok-free.app/api/gemini/ws/chat');\n\n            ws.onopen = () => {\n                appendMessage('System', 'Connected to Gemini Chat.');\n                toggleButtons(true);\n            };\n\n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                if (data.response) appendMessage('Gemini', data.response);\n                else if (data.error) appendMessage('System', `Error: ${data.error}`);\n                else if (data.info) appendMessage('System', data.info);\n            };\n\n            ws.onclose = () => {\n                appendMessage('System', 'Disconnected from Gemini Chat.');\n                toggleButtons(false);\n            };\n\n            ws.onerror = (error) => {\n                appendMessage('System', 'WebSocket error occurred.');\n                console.error('WebSocket Error:', error);\n            };\n        }\n\n        function disconnectWebSocket() {\n            if (ws) {\n                ws.close();\n                ws = null;\n            }\n        }\n\n        // Message Handling\n        function sendMessage() {\n            const message = messageInput.value.trim();\n            if (message === '' || !ws || ws.readyState !== WebSocket.OPEN) return;\n\n            appendMessage('User', message);\n            ws.send(JSON.stringify({ role: \"user\", text: message, type: \"text\" }));\n            messageInput.value = '';\n        }\n\n        // Audio Recording\n        async function startRecording() {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                mediaRecorder = new MediaRecorder(stream);\n\n                mediaRecorder.onstart = () => {\n                    audioChunks = [];\n                    recordButton.disabled = true;\n                    stopButton.disabled = false;\n                    appendMessage('System', 'Recording audio...');\n                };\n\n                mediaRecorder.ondataavailable = event => audioChunks.push(event.data);\n\n                mediaRecorder.onstop = () => {\n                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n                    const reader = new FileReader();\n\n                    reader.onload = () => {\n                        const base64AudioMessage = reader.result.split(',')[1];\n                        ws.send(JSON.stringify({ role: \"user\", audio: base64AudioMessage, type: \"audio\" }));\n                        appendMessage('System', 'Audio message sent.');\n                    };\n\n                    reader.readAsDataURL(audioBlob);\n                };\n\n                mediaRecorder.start();\n            } catch (error) {\n                appendMessage('System', 'Audio recording is not supported in this browser.');\n                console.error('Audio Recording Error:', error);\n            }\n        }\n\n        function stopRecording() {\n            mediaRecorder.stop();\n            recordButton.disabled = false;\n            stopButton.disabled = true;\n        }\n\n        // Event Listeners\n        connectButton.onclick = connectWebSocket;\n        disconnectButton.onclick = disconnectWebSocket;\n        sendButton.onclick = sendMessage;\n        recordButton.onclick = startRecording;\n        stopButton.onclick = stopRecording;\n\n        messageInput.addEventListener(\"keyup\", (event) => {\n            if (event.key === \"Enter\") sendMessage();\n        });\n    </script>\n</body>\n</html>\n","gemini_series_config.py":"# File: gemini_config.py\n# Contains shared configuration for Gemini API\n\nMODEL_VARIANTS = {\n    \"gemini-1.5-flash\": {\n        \"description\": \"Fast and versatile performance across a diverse variety of tasks\",\n        \"inputs\": [\"audio\", \"images\", \"videos\", \"text\"],\n        \"optimized_for\": \"Most balanced multimodal tasks balancing performance and cost\"\n    },\n    \"gemini-1.5-flash-8b\": {\n        \"description\": \"High volume and lower intelligence tasks\",\n        \"inputs\": [\"audio\", \"images\", \"videos\", \"text\"],\n        \"optimized_for\": \"Lower intelligence, high-frequency tasks\"\n    },\n    \"gemini-1.5-pro\": {\n        \"description\": \"Features for a wide variety of reasoning tasks\",\n        \"inputs\": [\"audio\", \"images\", \"videos\", \"text\"],\n        \"optimized_for\": \"Complex reasoning tasks requiring more intelligence\"\n    },\n    \"gemini-1.0-pro\": {\n        \"description\": \"Natural language tasks, multi-turn text and code chat, and code generation\",\n        \"inputs\": [\"text\"],\n        \"optimized_for\": \"Natural language and code-related tasks\"\n    },\n    \"text-embedding-004\": {\n        \"description\": \"Measuring the relatedness of text strings\",\n        \"inputs\": [\"text\"],\n        \"optimized_for\": \"Text embeddings\"\n    },\n    \"aqa\": {\n        \"description\": \"Providing source-grounded answers to questions\",\n        \"inputs\": [\"text\"],\n        \"optimized_for\": \"Question answering\"\n    }\n}\n\nSUPPORTED_LANGUAGES = [\n    \"ar\", \"bn\", \"bg\", \"zh\", \"hr\", \"cs\", \"da\", \"nl\", \"en\", \"et\", \"fi\",\n    \"fr\", \"de\", \"el\", \"iw\", \"hi\", \"hu\", \"id\", \"it\", \"ja\", \"ko\", \"lv\",\n    \"lt\", \"no\", \"pl\", \"pt\", \"ro\", \"ru\", \"sr\", \"sk\", \"sl\", \"es\", \"sw\",\n    \"sv\", \"th\", \"tr\", \"uk\", \"vi\"\n]\n\nSUPPORTED_RESPONSE_MIME_TYPES = [\"application/json\", \"text/plain\", \"text/x.enum\"]\n\n","gemini-chat.css":"/* gemini-chat.css */\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background-color: #f4f7f9;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    padding: 20px;\n}\n\n.chat-container {\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    width: 100%;\n    max-width: 600px;\n    overflow: hidden;\n}\n\n#chatLog {\n    height: 400px;\n    overflow-y: auto;\n    padding: 20px;\n    background-color: #fff;\n}\n\n.message {\n    margin-bottom: 15px;\n    padding: 10px;\n    border-radius: 5px;\n    max-width: 80%;\n}\n\n.message.user {\n    background-color: #e1f5fe;\n    margin-left: auto;\n}\n\n.message.gemini {\n    background-color: #f0f4c3;\n}\n\n.message.system {\n    background-color: #e8eaf6;\n    font-style: italic;\n}\n\n.input-area {\n    display: flex;\n    padding: 20px;\n    background-color: #f9f9f9;\n    border-top: 1px solid #eee;\n}\n\n#messageInput {\n    flex-grow: 1;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 20px;\n    font-size: 16px;\n}\n\n.button-group {\n    display: flex;\n    justify-content: space-between;\n    padding: 10px 20px;\n    background-color: #f0f0f0;\n}\n\nbutton {\n    padding: 8px 15px;\n    border: none;\n    border-radius: 20px;\n    background-color: #4CAF50;\n    color: white;\n    cursor: pointer;\n    transition: background-color 0.3s;\n    font-size: 14px;\n}\n\nbutton:hover:not(:disabled) {\n    background-color: #45a049;\n}\n\nbutton:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n","gemini_index.py":"# File: route/post/gemini.py\n# **DO NOT OMIT ANYTHING FROM THE FOLLOWING CONTENT, INCLUDING & NOT LIMITED TO COMMENTED NOTES\n\nfrom fastapi import APIRouter, HTTPException, Form\nfrom typing import Optional\nimport google.generativeai as genai\nimport os\nimport json\n\nfrom dotenv import load_dotenv\nfrom route.gemini_flash_series.gemini_series_config import MODEL_VARIANTS, SUPPORTED_LANGUAGES, SUPPORTED_RESPONSE_MIME_TYPES\nfrom fastapi.responses import HTMLResponse\nimport aiofiles\n# ------------------ Load Environment Variables --------------------\nload_dotenv()\n\n# ------------------ Initialize Router ------------------------------\nrouter = APIRouter(\n    tags=[\"Gemini Models\"],\n    # No prefix here\n    responses={401: {\"description\": \"Unauthorized\"}}\n)\n\n# ------------------ Configure the GenAI Client ----------------------\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nif not GOOGLE_API_KEY:\n    raise ValueError(\"GOOGLE_API_KEY is not set in the environment variables.\")\ngenai.configure(api_key=GOOGLE_API_KEY)\n\n# ------------------ Utility Functions -------------------------------\n# Removed: save_upload_file function\n# Removed: upload_to_genai function\n# Removed: get_mime_type function\n\n# ------------------ API Endpoints -------------------------------------\n\n@router.post(\"/generate\", summary=\"Generate Content\")\nasync def generate_content(\n    model: str = Form(..., description=\"Model variant to use\", example=\"gemini-1.5-flash-8b\"),\n    text: Optional[str] = Form(None, description=\"Input text prompt\"),\n    language: Optional[str] = Form(\"en\", description=\"Language code\", example=\"en\"),\n    candidate_count: int = Form(1, description=\"Number of candidate responses\", ge=1, le=5),\n    max_output_tokens: int = Form(500, description=\"Maximum number of tokens in the output\", ge=1, le=8192),\n    temperature: float = Form(0.95, description=\"Sampling temperature\", ge=0.0, le=2.0),\n    top_p: float = Form(0.9, description=\"Nucleus sampling parameter\", ge=0.0, le=1.0),\n    response_mime_type: str = Form(\"application/json\", description=\"Response MIME type\", example=\"application/json\"),\n    stream: bool = Form(False, description=\"Stream the response\")\n    # Removed: send_files, audio_files, image_files, video_files parameters\n):\n    \"\"\"\n    Generate content using Gemini models. Supports text input.\n    \"\"\"\n    if model not in MODEL_VARIANTS:\n        raise HTTPException(status_code=400, detail=f\"Unsupported model variant. Supported models: {list(MODEL_VARIANTS.keys())}\")\n\n    if language not in SUPPORTED_LANGUAGES:\n        raise HTTPException(status_code=400, detail=f\"Unsupported language. Supported languages: {SUPPORTED_LANGUAGES}\")\n\n    if response_mime_type not in SUPPORTED_RESPONSE_MIME_TYPES:\n        raise HTTPException(status_code=400, detail=f\"Unsupported response MIME type. Supported types: {SUPPORTED_RESPONSE_MIME_TYPES}\")\n\n    # Prepare contents\n    contents = []\n    if text:\n        contents.append({\n            \"role\": \"user\",\n            \"parts\": [{\"text\": text}]\n        })\n\n    # Removed: Handling of file uploads\n\n    # Generation configuration\n    generation_config = {\n        \"temperature\": temperature,\n        \"top_p\": top_p,\n        \"max_output_tokens\": max_output_tokens,\n        \"candidate_count\": candidate_count,\n        \"response_mime_type\": response_mime_type\n    }\n\n    # Safety settings (empty for this example, customize as needed)\n    safety_settings = {}\n\n    try:\n        # Initialize the generative model\n        gemini_model = genai.GenerativeModel(model_name=model)\n\n        # Call the model to generate content\n        response = gemini_model.generate_content(\n            contents=contents,\n            generation_config=generation_config,\n            safety_settings=safety_settings,\n            stream=stream\n        )\n\n        # Prepare the response\n        if candidate_count == 1:\n            return {\"response\": response.text}\n        else:\n            return {\"responses\": [candidate.text for candidate in response.candidates]}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Generation failed: {e}\")\n\n@router.post(\"/chat\", summary=\"Chat Session\")\nasync def chat_session(\n    model: str = Form(..., description=\"Model variant to use\", example=\"gemini-1.5-flash-8b\"),\n    messages: str = Form(..., description=\"Conversation history in JSON format\"),\n    temperature: float = Form(0.95, description=\"Sampling temperature\", ge=0.0, le=2.0),\n    top_p: float = Form(0.9, description=\"Nucleus sampling parameter\", ge=0.0, le=1.0)\n):\n    \"\"\"\n    Create or continue a chat session with the Gemini model.\n    \"\"\"\n    if model not in MODEL_VARIANTS:\n        raise HTTPException(status_code=400, detail=f\"Unsupported model variant. Supported models: {list(MODEL_VARIANTS.keys())}\")\n\n    try:\n        conversation = json.loads(messages)\n        if not isinstance(conversation, list):\n            raise ValueError(\"Messages must be a list of message objects.\")\n\n        # Determine whose turn it is\n        model_turn = conversation[-1].get(\"role\", \"\").lower() == \"user\"\n\n        # Initialize the generative model\n        gemini_model = genai.GenerativeModel(model_name=model)\n\n        if model_turn:\n            # User was last, send the last message\n            chat = gemini_model.start_chat(history=conversation[:-1])\n            last_message = conversation[-1][\"parts\"][0].get(\"text\", \"\")\n            response = chat.send_message(last_message)\n        else:\n            # Model was last, continue the conversation\n            chat = gemini_model.start_chat(history=conversation)\n            response = chat.send_message(\"\")\n\n        return {\"response\": response.text}\n    except json.JSONDecodeError:\n        raise HTTPException(status_code=400, detail=\"Invalid JSON format for messages.\")\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Chat session failed: {e}\")\n\n# Removed: /upload endpoint\n\n@router.get(\"/models\", summary=\"List Models\")\nasync def list_models():\n    \"\"\"\n    List all available Gemini model variants.\n    \"\"\"\n    return {\"models\": MODEL_VARIANTS}\n\n@router.get(\"/languages\", summary=\"List Supported Languages\")\nasync def list_languages():\n    \"\"\"\n    List all supported languages.\n    \"\"\"\n    return {\"languages\": SUPPORTED_LANGUAGES}\n\n\n\n\n\n\n\n\n### --------------------DEMO-VIEW----------------------- ###\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.responses import HTMLResponse, FileResponse\nimport os\n\n\n# Serve the HTML file\n@router.get(\"/test\", response_class=HTMLResponse)\nasync def serve_html():\n    file_path = os.path.join(os.path.dirname(__file__), \"gemini-socket-html-test.html\")\n    \n    # Check if the HTML file exists\n    if not os.path.exists(file_path):\n        raise HTTPException(status_code=404, detail=\"Test HTML file not found.\")\n    \n    # Read and return the HTML content\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        html_content = f.read()\n    \n    return HTMLResponse(content=html_content, media_type=\"text/html\")\n\n# Serve the CSS file\n@router.get(\"/gemini-chat.css\")\nasync def serve_css():\n    css_path = os.path.join(os.path.dirname(__file__), \"gemini-chat.css\")\n    \n    # Check if the CSS file exists\n    if not os.path.exists(css_path):\n        raise HTTPException(status_code=404, detail=\"CSS file not found.\")\n    \n    return FileResponse(css_path)\n","find_theaters.py":"from typing import Dict, Any\n\ndef find_theaters(location: str, movie: str = \"\") -> Dict[str, Any]:\n    \"\"\"Find theaters based on location and optionally movie title.\"\"\"\n    # Placeholder implementation. Replace with actual logic or API calls.\n    theaters = [\n        {\n            \"name\": \"AMC Mountain View 16\",\n            \"address\": \"2000 W El Camino Real, Mountain View, CA 94040\"\n        },\n        {\n            \"name\": \"Regal Edwards 14\",\n            \"address\": \"245 Castro St, Mountain View, CA 94040\"\n        }\n    ]\n    if movie:\n        theaters = [theater for theater in theaters if movie.lower() in theater[\"name\"].lower()]\n    return {\"location\": location, \"theaters\": theaters}\n\n# Metadata for the Gemini API\nFUNCTION_METADATA = {\n    \"name\": \"find_theaters\",\n    \"description\": \"Find theaters based on location and optionally movie title currently playing.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g., San Francisco, CA or a zip code.\"\n            },\n            \"movie\": {\n                \"type\": \"string\",\n                \"description\": \"Any movie title.\"\n            }\n        },\n        \"required\": [\"location\"]\n    }\n}\n","multiply.py":"from typing import Dict, Any\n\ndef multiply(a: float, b: float) -> float:\n    \"\"\"Returns the product of two numbers.\"\"\"\n    return a * b\n\n# Metadata for the Gemini API\nFUNCTION_METADATA = {\n    \"name\": \"multiply\",\n    \"description\": \"Returns the product of two numbers.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"a\": {\n                \"type\": \"number\",\n                \"description\": \"First number to multiply.\"\n            },\n            \"b\": {\n                \"type\": \"number\",\n                \"description\": \"Second number to multiply.\"\n            }\n        },\n        \"required\": [\"a\", \"b\"]\n    }\n}\n","functions_config.json":[{"module":"multiply","file":"multiply.py"},{"module":"find_theaters","file":"find_theaters.py"}]}